// Program written to mimic my Gameboy Advance game
// Escape the Godfather (ETG)
// Author: Shaun Cassar

/**
 * Enemy class of the ETG game.
 */
class Enemy {

    field int x; 
    field int y; 
    field int prevx; 
    field int prevy;
    field int width;
    field int height; 
    field int speed; 
    field boolean crashed;
    field Array2d image; 

    constructor Enemy new(int xlocation) {

        let x = xlocation;
        let y = 20;
        let width = 8; 
        let height = 8; 
        let speed = 8; 
        let crashed = false;

        let image = Array2d.new(8,8);
    
        // Tedious but I am not sure a better way to set up an array initialisation manually

        do image.set(0,0,1);do image.set(0,1,1);do image.set(0,2,1);do image.set(0,3,1);do image.set(0,4,1);do image.set(0,5,1);do image.set(0,6,1);do image.set(0,7,1);
        do image.set(1,0,1);do image.set(1,1,1);do image.set(1,2,1);do image.set(1,3,1);do image.set(1,4,1);do image.set(1,5,1);do image.set(1,6,1);do image.set(1,7,1);
        do image.set(2,0,0);do image.set(2,1,0);do image.set(2,2,0);do image.set(2,3,1);do image.set(2,4,1);do image.set(2,5,0);do image.set(2,6,0);do image.set(2,7,0);
        do image.set(3,0,0);do image.set(3,1,0);do image.set(3,2,0);do image.set(3,3,1);do image.set(3,4,1);do image.set(3,5,0);do image.set(3,6,0);do image.set(3,7,0);
        do image.set(4,0,0);do image.set(4,1,1);do image.set(4,2,1);do image.set(4,3,1);do image.set(4,4,1);do image.set(4,5,1);do image.set(4,6,0);do image.set(4,7,0);
        do image.set(5,0,0);do image.set(5,1,0);do image.set(5,2,0);do image.set(5,3,0);do image.set(5,4,0);do image.set(5,5,0);do image.set(5,6,1);do image.set(5,7,0);
        do image.set(6,0,1);do image.set(6,1,1);do image.set(6,2,1);do image.set(6,3,1);do image.set(6,4,1);do image.set(6,5,1);do image.set(6,6,1);do image.set(6,7,1);
        do image.set(7,0,0);do image.set(7,1,1);do image.set(7,2,1);do image.set(7,3,1);do image.set(7,4,1);do image.set(7,5,1);do image.set(7,6,1);do image.set(7,7,1);

        return this;
    }

    method int getHeight() { 
        return height;
    }

    method int getWidth() { 
        return width;
    }

    method int getX() { 
        return x;
    }

    method int getY() { 
        return y;
    }

    method void setHeight(int height) { 
        let height = height;
        return;
    }

    method void setWidth(int width) { 
        let width = width;
        return;
    }

    method void crashed() { 
        let speed = 0;
        let crashed = 1;
        return;
    }

    method boolean getCrashed() { 
        return crashed;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do image.dispose();
        do Memory.deAlloc(this);
        return;
    }

    //Draw the enemy
    method void draw() {
        var int i,j;
        var int value; 
        let i = 0;
        let j = 0;
        let value = 0;

        //First clean up the old       
        do clean();
        
        do Screen.setColor(true); 
        
        while (i < 8) { 
            
            while (j < 8) { 
                let value = image.get(i, j);

                if (value = 1) { 
                    do Screen.setColor(true); 
                }
                else { 
                    do Screen.setColor(false); 
                }

                do Screen.drawPixel(x+j,y+i);
                let j = j+1;
            }

            let i = i+1;
            let j = 0;
        }
        return;   
    
    }

    method void update() { 
        
        var boolean shrink; 

        //Draw towards the player
        let prevx = x;
        let prevy = y;    

        let y = y + speed;
        let shrink = shrinkHeight();

        if (shrink) {
            do crashed();
        }

        return;
    }

    method void clean() { 

        do Screen.setColor(false); 
        do Screen.drawRectangle(prevx, prevy, prevx+width, prevy+height);   

        return;
    }

    method boolean shrinkHeight() { 
        return y+height > 250;
    }
}
