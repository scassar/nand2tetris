function Math.init 2 
push constant 16 
call Array.new 1 
pop static 1 
push constant 0 
push static 1 
add 
push constant 1 
pop temp 0 
pop pointer 1 
push temp 0 
pop that 0 
push constant 1 
pop local 0 
push constant 1 
pop local 1 
push constant 16 
pop static 0 
label WHILE_EXP0 
push local 0 
push constant 16 
lt 
not 
if-goto WHILE_END0 
push local 1 
push local 1 
add 
pop local 1 
push local 0 
push static 1 
add 
push local 1 
pop temp 0 
pop pointer 1 
push temp 0 
pop that 0 
push local 0 
push constant 1 
add 
pop local 0 
goto WHILE_EXP0 
label WHILE_END0 
push constant 0 
return 
function Math.bit 3 
push constant 0 
pop local 0 
push constant 0 
pop local 1 
push static 0 
push constant 1 
sub 
pop local 2 
label WHILE_EXP0 
push local 1 
push local 2 
lt 
not 
if-goto WHILE_END0 
push local 2 
push local 1 
sub 
push static 1 
add 
pop pointer 1 
push that 0 
push argument 0 
lt 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0 
push local 2 
push local 1 
sub 
push static 1 
add 
pop pointer 1 
push that 0 
sub 
pop argument 0 
push argument 0 
push argument 1 
push static 1 
add 
pop pointer 1 
push that 0 
eq 
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push constant 0 
not 
pop local 0 
label IF_FALSE1 
label IF_FALSE0 
push local 1 
push constant 1 
add 
pop local 1 
goto WHILE_EXP0 
label WHILE_END0 
push local 0 
return 
function Math.multiply 3 
push constant 0 
pop local 2 
push constant 0 
pop local 0 
push argument 0 
pop local 1 
push argument 0 
push constant 0 
lt 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0 
neg 
push argument 1 
call Math.multiply 2 
neg 
return 
label IF_FALSE0 
push argument 1 
push constant 0 
lt 
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push argument 0 
push argument 1 
neg 
call Math.multiply 2 
neg 
return 
label IF_FALSE1 
label WHILE_EXP0 
push local 2 
push static 0 
lt 
not 
if-goto WHILE_END0 
push local 2 
push static 1 
add 
pop pointer 1 
push that 0 
push argument 1 
and 
if-goto IF_TRUE2 
goto IF_FALSE2 
label IF_TRUE2 
push local 0 
push local 1 
add 
pop local 0 
label IF_FALSE2 
push local 1 
push local 1 
add 
pop local 1 
push local 2 
push constant 1 
add 
pop local 2 
goto WHILE_EXP0 
label WHILE_END0 
push local 0 
return 
function Math.divide 1 
push argument 1 
push constant 0 
eq 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push constant 1 
call Sys.error 1 
pop temp 0 
label IF_FALSE0 
push argument 0 
push constant 0 
lt 
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push argument 0 
neg 
push argument 1 
call Math.divide 2 
neg 
return 
label IF_FALSE1 
push argument 1 
push constant 0 
lt 
if-goto IF_TRUE2 
goto IF_FALSE2 
label IF_TRUE2 
push argument 0 
push argument 1 
neg 
call Math.divide 2 
neg 
return 
label IF_FALSE2 
push argument 1 
push argument 0 
gt 
if-goto IF_TRUE3 
goto IF_FALSE3 
label IF_TRUE3 
push constant 0 
return 
label IF_FALSE3 
push argument 0 
push argument 1 
push argument 1 
add 
call Math.divide 2 
pop local 0 
push argument 0 
push constant 2 
push local 0 
call Math.multiply 2 
push argument 1 
call Math.multiply 2 
sub 
push argument 1 
lt 
if-goto IF_TRUE4 
goto IF_FALSE4 
label IF_TRUE4 
push local 0 
push local 0 
add 
return 
goto IF_END4 
label IF_FALSE4 
push local 0 
push local 0 
add 
push constant 1 
add 
return 
label IF_END4 
function Math.sqr 3 
push argument 1 
push constant 1 
sub 
pop local 2 
push constant 0 
pop local 0 
push argument 0 
pop local 1 
push local 2 
push constant 1 
neg 
eq 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push constant 1 
return 
label IF_FALSE0 
push local 2 
push constant 0 
eq 
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push local 1 
return 
label IF_FALSE1 
label WHILE_EXP0 
push local 0 
push local 2 
lt 
not 
if-goto WHILE_END0 
push local 1 
push argument 0 
call Math.multiply 2 
pop local 1 
push local 0 
push constant 1 
add 
pop local 0 
goto WHILE_EXP0 
label WHILE_END0 
push local 1 
return 
function Math.sqrt 2 
push constant 0 
pop local 0 
push static 0 
push constant 2 
call Math.divide 2 
push constant 1 
sub 
pop local 1 
push argument 0 
push constant 32767 
eq 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push constant 181 
return 
label IF_FALSE0 
label WHILE_EXP0 
push local 1 
push constant 1 
neg 
gt 
not 
if-goto WHILE_END0 
push local 0 
push constant 2 
push local 1 
call Math.sqr 2 
add 
push local 0 
push constant 2 
push local 1 
call Math.sqr 2 
add 
call Math.multiply 2 
push argument 0 
push constant 1 
add 
lt 
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push local 0 
push constant 2 
push local 1 
call Math.sqr 2 
add 
pop local 0 
label IF_FALSE1 
push local 1 
push constant 1 
sub 
pop local 1 
goto WHILE_EXP0 
label WHILE_END0 
push local 0 
return 
function Math.max 0 
push argument 0 
push argument 1 
gt 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0 
return 
label IF_FALSE0 
push argument 1 
return 
function Math.min 0 
push argument 0 
push argument 1 
lt 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0 
return 
label IF_FALSE0 
push argument 1 
return 
function Math.abs 0 
push argument 0 
push constant 0 
lt 
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0 
neg 
return 
label IF_FALSE0 
push argument 0 
return 
